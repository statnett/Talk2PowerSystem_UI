{
  "tt2ps": {
    "title": "Talk to Power System",
    "footer": {
      "security_disclaimer": "This is a demo version and we cannot guarantee the accuracy of results, nor the availability or security of the system. Please don't include any kind of sensitive data in your questions"
    },
    "login-errors": {
      "popup_window_error": "Error opening popup window. This can happen if popups are blocked in your browser. <br>Please enable popups for this site and try again.",
      "user_cancelled": "Sign-in was cancelled."
    },
    "login": {
      "already_logged_in": "You are already signed in",
      "you_are_already_logged_in": "You are authenticated and can use the chatbot.",
      "go_to_chatbot": "Go to Chatbot",
      "logout": "Sign out",
      "not_logged_in": "You are not signed in",
      "login_required": "Please sign in before using the Talk to Power System chatbot.",
      "security_not_enabled": "Security is not enabled",
      "security_not_enabled_description": "You can access the chatbot directly without signing in."
    },
    "components": {
      "ontologies": {
        "title": "Ontologies",
        "table_headers": {
          "ontology-name": "Ontology Name",
          "version": "Version",
          "last-update-date": "Last Update Date"
        }
      },
      "datasets": {
        "title": "Datasets",
        "table_headers": {
          "dataset-name": "Dataset Name",
          "last-update-date": "Last Update Date"
        }
      },
      "agent": {
        "title": "Agent",
        "property": {
          "assistantInstructions": "Assistant Instructions",
          "llm": {
            "type": "Type",
            "model": "Model",
            "temperature": "Temperature",
            "seed": "Seed"
          },
          "tools": {
            "label": "Agent tools",
            "enabled": "Enabled",
            "sparql_query": {
              "name": "SPARQL query"
            },
            "autocomplete_search": {
              "name": "Autocomplete search",
              "property_path": "Property Path",
              "sparql_query_template": "SPARQL query template"
            },
            "sample_sparql_queries": {
              "name": "Sample SPARQL Queries",
              "sparql_query_template": "SPARQL query template",
              "connector_name": "Connector name"
            },
            "retrieve_data_points": {
              "name": "Retrieve data points",
              "base_url": "Base URL",
              "project": "Project",
              "client_name": "Client name"
            },
            "retrieve_time_series": {
              "name": "Retrieve time series",
              "base_url": "Base URL",
              "project": "Project",
              "client_name": "Client name"
            },
            "now": {
              "name": "Now"
            }
          }
        }
      },
      "graphdb": {
        "title": "GraphDB",
        "property": {
          "version": "Version",
          "repository": "Repository",
          "baseUrl": "Base URL",
          "numberOfExplicitTriples": "Number of Explicit Triples",
          "numberOfTriples": "Number of Triples",
          "autocompleteIndexStatus": {
            "label": "Autocomplete Status",
            "ready": "Ready",
            "none": "Index not built yet.",
            "building": "Building...",
            "canceled": "Index building was cancelled.",
            "ready_config": "Indexing options have changed but they have not been applied yet."
          },
          "rdfRankStatus": {
            "label": "RDF Rank Status",
            "computed": "Computed",
            "canceled": "Computation canceled",
            "config-changed": "Configuration changed",
            "outdated": "Outdated",
            "computing": "Computing...",
            "empty": "RDFRank not built yet"
          }
        }
      },
      "backend": {
        "title": "Backend",
        "property": {
          "description": "Description",
          "version": "Version",
          "buildDate": "Build Date",
          "buildBranch": "Build Branch",
          "gitSHA": "Git SHA",
          "pythonVersion": "Python Version",
          "dependencies": {
            "label": "Dependencies",
            "table_headers": {
              "package-name": "Dependency name"
            }
          }
        }
      },
      "frontend": {
        "title": "Frontend",
        "property": {
          "framework": {
            "label": "Framework"
          },
          "project": {
            "version": "Version"
          },
          "runtime": {
            "label": "JavaScript runtime"
          },
          "dependencies": {
            "label": "Dependencies",
            "table_headers": {
              "package-name": "Dependency name"
            }
          }
        }
      },
      "dependencies": {
        "table_headers": {
          "version": "Version"
        }
      },
      "software-versions": {
        "title": "Software Versions"
      }
    }
  },
  "header": {
    "btn": {
      "logout": {
        "label": "Sign out"
      },
      "login": {
        "label": "Sign in"
      }
    }
  },
  "main_menu": {
    "btn": {
      "chatbot": {
        "label": "Chatbot",
        "tooltip": "Open Chatbot"
      },
      "components": {
        "label": "Components",
        "tooltip": "Open Components"
      }
    }
  },
  "chat_panel": {
    "hint": "Simply ask a question!",
    "btn": {
      "regenerate": {
        "tooltip": "Regenerate"
      },
      "explain_response": {
        "tooltip": "Explain response"
      },
      "derive_answer": {
        "label": "How did you derive this answer?",
        "hint": "<b>Hint</b>: you can also ask the model, for example"
      },
      "copy_answer": {
        "tooltip": "Copy answer"
      },
      "copy_raw_query": {
        "tooltip": "Copy raw query"
      },
      "copy_sparql": {
        "tooltip": "Copy SPARQL query"
      },
      "copy_json": {
        "tooltip": "Copy JSON query"
      },
      "copy_other": {
        "tooltip": "Copy query"
      },
      "copy_error_message": {
        "tooltip": "Copy error message"
      },
      "open_in_sparql_editor": {
        "tooltip": "Open in SPARQL editor"
      },
      "open_sidebar": {
        "tooltip": "Show question list"
      },
      "close_sidebar": {
        "tooltip": "Hide question list"
      }
    },
    "placeholder": {
      "ask-input": "Ask anything"
    },
    "labels": {
      "query_method": "Query method",
      "args": "Arguments",
      "sparql_query": "SPARQL query",
      "question_asked": "{{date}} at {{time}}",
      "json": "JSON",
      "error_message": "Error message sent to model",
      "explain_no_methods": "No query methods were called.",
      "called": "Called {{('chat_panel.query_name.' + name) | translate}}",
      "no_query": "There is no query."
    },
    "query_colon": ":",
    "query_name": {
      "sparql_query": "SPARQL",
      "fts_search": "Full-text search",
      "similarity_search": "Similarity search",
      "retrieval_search": "ChatGPT Retrieval",
      "iri_discovery": "FTS for IRI discovery",
      "now": "the Now function",
      "autocomplete_iri_discovery_search": "Autocomplete for IRI discovery",
      "autocomplete_search": "GraphDB Autocomplete Search",
      "sample_sparql_queries": "Sample SPARQL Queries aka N-Shot Learning",
      "retrieve_time_series": "Retrieve timeseries from Cognite",
      "retrieve_data_points": "Retrieve datapoints from Cognite"
    },
    "query_desc": {
      "sparql_query": "Direct query",
      "fts_search": "Full-text search via SPARQL",
      "similarity_search": "Similarity search via SPARQL",
      "retrieval_search": "Direct JSON query",
      "iri_discovery": "Full-text search via SPARQL",
      "now": "Returns the system time",
      "autocomplete_iri_discovery_search": "Autocomplete search via SPARQL",
      "autocomplete_search": "Search by name and class for IRIs of named entities mentioned in the users' questions",
      "sample_sparql_queries": "Given a user question, fetch similar questions by vector similarity, and provide the corresponding SPARQL queries as examples to the LLM agent.",
      "retrieve_time_series": "Retrieve one or more time series. Optionally, the time series can be filtered by mrid.",
      "retrieve_data_points": "Retrieve datapoints for one or more time series"
    },
    "token_usage_info": {
      "title": "Tokens usage",
      "prompt_tokens_info": "{{promptTokens}} prompt tokens",
      "prompt_tokens_info_description": "Tokens used to process instructions, chat history and user input.",
      "completion_tokens_info": "{{completionTokens}} completion tokens",
      "completion_tokens_info_description": "Tokens used to generate the response"
    },
    "messages": {
      "explain_response_failure": "Failed to retrieve the explanation for the response."
    },
    "error": {
      "create_chat_failure": "Failed to create chat session.",
      "unprocessable_entity": "Validation failed",
      "conversation_not_found": "Conversation expired: previous questions are not taken into account.",
      "ask_question_failure": "Failed to ask the question. Please try again."
    }
  },
  "copy_to_clipboard": {
    "messages": {
      "copied_to_clipboard": "Copied to clipboard"
    }
  }
}
